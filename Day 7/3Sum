https://leetcode.com/problems/3sum/

class Solution {
public:
    vector <vector <int>> threeSum(vector<int>& nums) {
       
       
        vector <vector <int>> FinalAns ; 
         if ( !nums.size() || nums.size() <= 2 ) return FinalAns;
         sort(nums.begin(), nums.end() ) ;
        int j = 0 ; 
        for ( int i = 0 ; i < (nums.size()-2) ; i++ )
        {
             if ( i == 0 || (i > 0 and nums[i] != nums[i-1]) )
             {
             	 int a = -1*(nums[i]), low = i+1 , high = nums.size()-1 ;
                 while ( low < high )
                 {
                     if ( nums[low] + nums[high] == a )
                     {
                         vector <int>v ; 
                         v.push_back(-1*a);
                         v.push_back(nums[low]);
                         v.push_back(nums[high]);
                         FinalAns.push_back(v) ;
                      while ( low < high and nums[low] == nums[low+1] )low++ ;
                      while ( low < high and nums[high] == nums[high-1] )high-- ;
                      low++ , high-- ;
                    
                      }
                     else 
                         if ( (nums[low]+nums[high] < a) ) low++ ;
                     else high-- ;
                  }
             }
           
            
        }
       return FinalAns ; 
    }
    
        
    
};
