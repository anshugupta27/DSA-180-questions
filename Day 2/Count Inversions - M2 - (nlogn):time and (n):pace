https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1#

long long int merge ( long long arr[] , long long temp[] , int low , int mid , int high )
    {
        int i = low ; 
        int j = mid ; 
        int k = low ; 
        long long int invCount = 0 ; 
        while ( (i <= mid-1) and (j <= high) )
        {
            if ( arr[j] >= arr[i] )
            temp[k++] = arr[i++] ;
            else
            {
                temp[k++] = arr[j++] ;
                invCount += (mid - i) ; 
            }
        }
        while ( i <= mid-1 )
        {
            temp[k++] = arr[i++] ;
        }
        while ( j <= high )
        {
            temp[k++] = arr[j++] ;
        }
        for ( int i = low ; i <= high ; i++ )
        arr[i] = temp[i] ;
        
        return invCount ; 
    }
    long long int merge_sort_algo ( long long arr[] , long long temp[] , int low , int high )
    {
        long long int invCount = 0 ; 
        int mid ;
        while ( low < high )
        {
            mid = ( low+high )/2 ; 
            invCount += merge_sort_algo ( arr , temp , low , mid ) ;
            invCount += merge_sort_algo ( arr , temp , mid+1 , high ) ;
            
            invCount += merge ( arr , temp , low , mid+1 , high ) ;
        }
        return invCount ; 
    }
    long long int inversionCount(long long arr[], long long N)
    {
        long long temp[N] ;
        long long int ans = merge_sort_algo( arr , temp , 0 , N-1 ) ;
        return ans ; 
    }
