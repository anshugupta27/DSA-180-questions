https://practice.geeksforgeeks.org/problems/boolean-parenthesization5610/1#

class Solution{
public:
int dp[205][205][2] ;


int countWaysUtil ( string s , int size , int i , int j , bool isTrue )
{
    if ( i > j ) return 0 ; 
    
    if ( i == j )
    {
        if ( isTrue == true ) return s[i] == 'T' ? 1 : 0 ; 
        else return s[i] == 'F' ? 1 : 0 ; 
    }
    
    if ( dp[i][j][isTrue] != -1 ) return dp[i][j][isTrue] ;

   
    int ans = 0 ; 
    for ( int k = i+1 ; k <= j-1 ; k = k + 2 )
    {
        int lt ; 
        if ( dp[i][k-1][true] != -1 )
            lt = dp[i][k-1][true] ;
        else
         lt = countWaysUtil ( s , size , i , k-1 , true ) ;
         
         int lf ; 
         if ( dp[i][k-1][false] != -1 )
         lf = dp[i][k-1][false] ;
         else
         lf = countWaysUtil ( s , size , i , k-1 , false ) ;
         
         int rt ; 
         if ( dp[k+1][j][true] != -1 )
         rt = dp[k+1][j][true] ;
         else
         rt = countWaysUtil ( s , size , k+1 , j , true ) ;
         
         int rf ; 
         if ( dp[k+1][j][false] != -1 )
         rf = dp[k+1][j][false] ;
         else
         rf = countWaysUtil ( s , size , k+1 , j , false ) ;
        
        if ( s[k] == '&' )
       {
          if ( isTrue == true )
          ans = ans + ( lt * rt ) ;
          else 
          ans = ans + ( lt * rf ) + ( lf * rt ) + ( lf * rf ) ;
        }
       else if ( s[k] == '|' )
        {
          if ( isTrue == true )
          ans = ans + ( lt * rt ) + ( lt * rf ) + ( lf * rt ) ;
          else 
          ans = ans + ( lf * rf ) ;
        }
       else if ( s[k] == '^' )
        {
          if ( isTrue == true )
          ans = ans + ( lf * rt ) + (lt * rf ) ;
          else 
          ans = ans + ( lf * rf ) + ( rt * lt ) ;
         }
     
    }
    return dp[i][j][isTrue] = ans%1003 ;
    
    
}
    int countWays(int N, string S){
        memset ( dp , -1 , sizeof(dp)) ;
        return countWaysUtil ( S , N , 0 , N-1 , true ) ;
    }
};
