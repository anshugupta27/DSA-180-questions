https://leetcode.com/problems/shortest-common-supersequence/

class Solution {
public:
    string LCSUtil ( string s1 , string s2 )
    {
        int n = s1.length() ; 
        int m = s2.length() ;
        int dp[n+1][m+1] ;
        for ( int i = 0 ; i < n+1 ; i++ ) dp[i][0] = 0 ; //column 0 
        for ( int i = 0 ; i < m+1 ; i++ ) dp[0][i] = 0 ; // row 0 
        
        // LCS
        for ( int i = 1 ; i <n+1 ; i++ )
        {
            for ( int j = 1 ; j < m+1 ; j++ )
            {
                if ( s1[i-1] == s2[j-1] )
                    dp[i][j] = dp[i-1][j-1] + 1 ; 
                else 
                    dp[i][j] = max ( dp[i-1][j] , dp[i][j-1] ) ;
            }
        }
        
        
        int i = n , j = m ; 
        string v = "" ;
        while ( i > 0 and j > 0 )
        {
            if ( s1[i-1] == s2[j-1] )
            {
                v.push_back ( s1[i-1] );
                i-- , j-- ;
            }
            else
            {
                if ( dp[i-1][j] > dp[i][j-1] )
                {
                    v.push_back ( s1[i-1] ) ;
                    i-- ;
                }
                else
                {
                    v.push_back ( s2[j-1] ) ;
                    j-- ;
                }
            }
        }
        while ( i > 0 )
        {
            v.push_back ( s1[i-1] ) ;
            i-- ;
        }
        while ( j > 0 )
        {
            v.push_back ( s2[j-1] ) ;
            j-- ;
        }
        reverse ( v.begin() , v.end() ) ;
        return v ; 
    }
    string shortestCommonSupersequence(string str1, string str2) {
        return LCSUtil ( str1 , str2 ) ;
    }
};
