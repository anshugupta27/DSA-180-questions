https://leetcode.com/problems/target-sum/

read the 2 base cases over here and apply them in all the knapsack varitations where it is asked to find the number of subset with a particular target
class Solution {
public:
// this cpp solution is accepted on leetcode:
// 1. By putting pow(2,cnt) in dp[i][0]
// 2. one more condition needs to be checked i.e.if((S+sum)%2!=0)  then  we would never get the difference S by partitioning the array into two subsets.


    
//     For those who has problem with test case  [0,0,0,0,0,0,0,0,1], target = 1.

// The solution doesn't consider presence of "0"s in the array. Why the output is different ?

// Because, if we have "0", then, it can have +0 and -0 and still will not effect the sum of a set. For example: Target value is = 2

// 1) {0,2} = {+0,2}, {-0,2}.  Ans: 2

// But if we increase number of 0s,

// 2) {0,0,2} = {+0,+0,2}, {+0,-0,2}, {-0,+0,2},{-0,-0,2} . Ans: 4



// So, if you observe, your answer increase by (2^number of 0s) i.e. pow(2,number of zeros).

    
    int findTargetSumWaysUtil ( vector<int>& nums , int target )
    {
        int dp[nums.size()+1][target+1] ;
        for ( int i = 0 ; i < target+1 ; i++ )
            dp[0][i] = 0 ; 
        dp[0][0] = 1 ; 
        int zero = 0 ; 
        for ( int i = 1 ; i < nums.size()+1 ; i++ )
        {
            if ( nums[i-1] == 0 ) ++zero ; 
            
            dp[i][0] = pow( 2 , zero ) ; // 
        } 
        for ( int i = 1 ; i < nums.size()+1 ; i++ )
        {
            for ( int j = 1 ; j < target+1 ; j++ )
            {
                if ( j >= nums[i-1] )
                    dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j] ;
                else 
                    dp[i][j] = dp[i-1][j] ;
            }
        }
        return dp[nums.size()][target] ;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int range = 0 ;
        for ( int i = 0 ; i < nums.size() ; i++ )
        {
            range += nums[i] ;
           
        }
        int val = (range + target) / 2 ; 
        int rem = (range + target ) % 2 ; 
        if ( rem != 0 ) return 0 ; 
        
        return findTargetSumWaysUtil ( nums , val ) ;
        
    }
};
