https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1

class Solution{

	public:
	vector<int> minDifferenceUtil ( int arr[] , int n , int range )
	{
	    vector<int> v ; 
	    bool dp[n+1][range+1] ;
	    for ( int i = 0 ; i < range+1 ; i++ )
	    dp[0][i] = false ; 
	    for ( int i = 0 ; i < n+1 ; i++ )
	    dp[i][0] = true ; 
	    
	    for ( int i = 1 ; i < n+1 ; i++ )
	    {
	        for ( int j = 1 ; j < range+1 ; j++ )
	        {
	            if ( arr[i-1] <= j )
	            dp[i][j] = dp[i-1][j-arr[i-1]] + dp[i-1][j] ;
	            else 
	            dp[i][j] = dp[i-1][j] ;
	        }
	    }
	    
	    for ( int i = 0 ; i < (range+1)/2 ; i++ ) // i < range+1 is also ok 
	    {
	        if ( dp[n][i] )
	        v.push_back ( i ) ;
	    }
	    return v ; 
	    
	}
	int minDiffernce(int arr[], int n) 
	{ 
	    int range = 0 , Min = INT_MAX ; 
	    for ( int i = 0 ;  i < n ; i++ ) range += arr[i] ;
	    
	    vector<int> v = minDifferenceUtil ( arr , n , range ) ;
	    
	    for ( int i = 0 ; i < v.size() ; i++ )
	    {
	        Min = min ( Min , abs(range - 2*v[i] )) ;
	    }
	    return Min ; 
	} 
};
