https://leetcode.com/problems/search-in-rotated-sorted-array/



int findPivot ( vector<int> &nums , int low , int high )
    {
        int N = nums.size() ;
        while ( low <= high )
        {
            int mid = low + ( high - low ) / 2 ;
            
            int next = (mid + 1)%N ; 
            int prev = (mid + N - 1)%N ; 
            
            if ( nums[next] >= nums[mid] and nums[prev] >= nums[mid] ) return mid ;
            
            else if ( nums[low] <= nums[mid] )
            {
                int prevLow = ( low + N - 1 ) % N ; 
                if ( nums[low] < nums[prevLow] ) return low ; 
                low = mid + 1 ;
            }
            else if ( nums[mid] <= nums[high] ) 
                high = mid - 1 ; 
        }
        return 0 ; 
    }
    int searchBS ( vector<int> & nums ,int target , int low , int high )
    {
        while ( low <= high )
        {
            int mid = low + ( high - low ) / 2 ; 
            if ( nums[mid] == target ) return mid ; 
            if ( target >= nums[low] and target<= nums[mid] ) high = mid - 1 ; 
            else low = mid + 1 ;
        }
        return -1 ; 
    }
    int search(vector<int>& nums, int target) {
        int low = 0 , high = nums.size() - 1 ; 
        int pivot = findPivot ( nums , low , high ) ;
        
         int BSRight = searchBS ( nums , target , pivot , high ) ;
        
         
          int BSLeft = searchBS ( nums , target , low , pivot - 1 ) ;
        
        if ( BSLeft != -1 ) return BSLeft ; 
        else return BSRight ; 
        
         
    }
