https://www.youtube.com/watch?v=LPFhl65R7ww

https://leetcode.com/problems/median-of-two-sorted-arrays/

 double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
       
       
       if ( nums1.size() > nums2.size() ) 
           return findMedianSortedArrays ( nums2 , nums1 ) ;
       
       int x = nums1.size() , y = nums2.size() ;
       
       int totalMid = ( x + y + 1 ) / 2 ; 
       int left = 0 , right = nums1.size()  ;
       
       while ( left <= right )
       {
           int partitionX = ( left + right ) / 2 ; 
           int partitionY = totalMid - partitionX ; 
           
           int maxLeftX = ( partitionX == 0 ) ? INT_MIN : nums1[partitionX - 1] ;
           int minRightX = ( partitionX == x ) ? INT_MAX : nums1[partitionX] ;
           
           int maxLeftY = ( partitionY == 0 ) ? INT_MIN : nums2[partitionY - 1] ;
           int minRightY = ( partitionY == y ) ? INT_MAX : nums2[partitionY] ;
           
           if ( maxLeftX <= minRightY and maxLeftY <= minRightX )
           {
               cout << maxLeftX << " " << maxLeftY << " " << minRightX << " " << minRightY ;
               if ( (x + y) % 2 == 0 )
                   return  (max ( maxLeftX , maxLeftY ) + min ( minRightX , minRightY )) / 2.0 ; 
               else 
                   return  double(max ( maxLeftX , maxLeftY )) ;
           }
           else if (  maxLeftX > minRightY )
           {
             right = partitionX - 1 ; 
           }
           else 
           {
               left = partitionX + 1 ; 
           }
       }
       return -1 ;
   }
